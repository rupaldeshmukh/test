const handleMove = (direction, carouselId) => {
    setCarouselData(prevState => {
        const carousel = prevState[carouselId];
        const newIndex = (carousel.currentIndex + (direction === "prev" ? 1 : -1) + carousel.items.length) % carousel.items.length;
        
        return {
            ...prevState,
            [carouselId]: {
                ...carousel,
                items: [...carousel.items.slice(newIndex), ...carousel.items.slice(0, newIndex)],
                currentIndex: newIndex,
            }
        };
    });
};


____

const [carouselData, setCarouselData] = useState({
    carousel1: {
        items: [/* your items here */],
        currentIndex: 0,
    },
    carousel2: {
        items: [/* your items here */],
        currentIndex: 0,
    },
    // Add more carousels as needed
});

___

handleMove("prev", "carousel1"); // Move carousel1 to the previous item
handleMove("next", "carousel2"); // Move carousel2 to the next item
