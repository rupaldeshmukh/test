import React, { useState } from 'react';
import MultiSelectDropdown from './Component/MultiSelectDropdown';

function App() {
  const [selectedGroups, setSelectedGroups] = useState([]);

  const handleSelectionChange = (newSelection) => {
    setSelectedGroups(newSelection);
    // console.log("Selected groups:", newSelection);
    // Here, you could make an API call to save the selected groups
  };

  const saveSelectedGroups = () => {
    // Example API call to save the selected groups
    // console.log("test selectedGroups",selectedGroups)
  };

  const options = [
    'test ',
    'P&T test ',
    'TCM Team (Ptest ',
    'T-test ',
    'P&test ',
    'test Web'
    // Add more options as needed
  ];

  return (
    <div className="App">
      <h1>Select AAD Groups</h1>
      <MultiSelectDropdown options={options} onSelectionChange={handleSelectionChange} />
      <button onClick={saveSelectedGroups}>Save Groups</button>
    </div>
  );
}

export default App;

??????????????????????????


import React, { useState, useRef, useEffect } from 'react';
import './MultiSelectDropdown.css';

const MultiSelectDropdown = ({ options, onSelectionChange }) => {
  const [selectedOptions, setSelectedOptions] = useState([]);
  const [dropdownVisible, setDropdownVisible] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const dropdownRef = useRef(null);

  const handleCheckboxChange = (event) => {
    const value = event.target.value;
    const newSelectedOptions = selectedOptions.includes(value)
      ? selectedOptions.filter((option) => option !== value)
      : [...selectedOptions, value];

    setSelectedOptions(newSelectedOptions);
    onSelectionChange(newSelectedOptions);  // Pass the updated selection to the parent
  };

  const toggleDropdown = () => {
    setDropdownVisible(!dropdownVisible);
  };

  const handleClickOutside = (event) => {
    if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
      setDropdownVisible(false);
    }
  };

  const handleInputChange = (event) => {
    setSearchTerm(event.target.value);
    setDropdownVisible(true);
  };

  const filteredOptions = options.filter(option =>
    option.toLowerCase().includes(searchTerm.toLowerCase())
  );

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <div className="multi-select-dropdown" ref={dropdownRef}>
      <div className="dropdown-input" onClick={toggleDropdown}>
        <input
          type="text"
          placeholder="Search and select"
          value={searchTerm}
          onChange={handleInputChange}
        />
      </div>
      {dropdownVisible && (
        <div className="dropdown-content">
          {filteredOptions.length > 0 ? (
            filteredOptions.map((option) => (
              <label key={option} className="dropdown-option">
                <input
                  type="checkbox"
                  value={option}
                  checked={selectedOptions.includes(option)}
                  onChange={handleCheckboxChange}
                />
                {option}
              </label>
            ))
          ) : (
            <div className="no-options">No matching options</div>
          )}
        </div>
      )}
      <div className="selected-options">
        {selectedOptions.map((option) => (
          <span key={option} className="selected-option">
            {option} <button onClick={() => handleCheckboxChange({ target: { value: option } })}>Ã—</button>
          </span>
        ))}
      </div>
    </div>
  );
};

export default MultiSelectDropdown;

??????????????????????
.multi-select-dropdown {
    width: 300px;
    position: relative;
    font-family: Arial, sans-serif;
  }
  
  .dropdown-input {
    display: flex;
    align-items: center;
    border: 1px solid #ccc;
    border-radius: 4px;
    padding: 8px;
    background-color: #fff;
  }
  
  .dropdown-input input {
    border: none;
    outline: none;
    width: 100%;
  }
  
  .dropdown-content {
    position: absolute;
    width: 100%;
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #ccc;
    border-radius: 4px;
    background-color: #fff;
    z-index: 1000;
    margin-top: 5px;
  }
  
  .dropdown-option {
    display: flex;
    align-items: center;
    padding: 5px 10px;
    cursor: pointer;
  }
  
  .dropdown-option:hover {
    background-color: #f0f0f0;
  }
  
  .dropdown-option input {
    margin-right: 8px;
  }
  
  .no-options {
    padding: 10px;
    text-align: center;
    color: #999;
  }
  
  .selected-options {
    margin-top: 10px;
    display: flex;
    flex-wrap: wrap;
  }
  
  .selected-option {
    background-color: #f0f0f0;
    padding: 5px 10px;
    margin: 5px;
    border-radius: 4px;
    display: inline-flex;
    align-items: center;
  }
  
  .selected-option button {
    background: none;
    border: none;
    margin-left: 5px;
    cursor: pointer;
    color: #888;
  }


_++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
import React, { useState, useEffect } from 'react';

const MultiSelectFilters = () => {
    const data = {
        "report": [
            { "Domain": "Supportive", "subDomain": "AdressSupp1" },
            { "Domain": "Supportive", "subDomain": "AdressSupp2" },
            { "Domain": "Finance", "subDomain": "FinanceAdress1" },
            { "Domain": "Finance", "subDomain": "FinanceAdress2" },
            { "Domain": "Individual", "subDomain": "IndiAdress1" },
            { "Domain": "Individual", "subDomain": "IndiAdress2" },
            { "Domain": "Individual", "subDomain": "IndiAdress3" }
        ]
    };

    const domainData = data.report.reduce((acc, { Domain, subDomain }) => {
        if (!acc[Domain]) {
            acc[Domain] = [];
        }
        acc[Domain].push(subDomain);
        return acc;
    }, {});

    const [selectedDomains, setSelectedDomains] = useState([]);
    const [subDomainOptions, setSubDomainOptions] = useState([]);
    const [selectedSubDomains, setSelectedSubDomains] = useState([]);

    useEffect(() => {
        const filteredSubDomains = selectedDomains.flatMap(domain => domainData[domain]);
        setSubDomainOptions(filteredSubDomains);
    }, [selectedDomains]);

    const handleDomainChange = (e) => {
        const options = e.target.options;
        const selected = [];
        for (let i = 0; i < options.length; i++) {
            if (options[i].selected) {
                selected.push(options[i].value);
            }
        }
        setSelectedDomains(selected);
    };

    const handleSubDomainChange = (e) => {
        const options = e.target.options;
        const selected = [];
        for (let i = 0; i < options.length; i++) {
            if (options[i].selected) {
                selected.push(options[i].value);
            }
        }
        setSelectedSubDomains(selected);
    };

    return (
        <div>
            <h2>Select Domain</h2>
            <select multiple onChange={handleDomainChange}>
                {Object.keys(domainData).map(domain => (
                    <option key={domain} value={domain}>{domain}</option>
                ))}
            </select>

            <h2>Select SubDomain</h2>
            <select multiple onChange={handleSubDomainChange}>
                {subDomainOptions.map(subDomain => (
                    <option key={subDomain} value={subDomain}>{subDomain}</option>
                ))}
            </select>

            <div>
                <h3>Selected Domains:</h3>
                <ul>
                    {selectedDomains.map(domain => (
                        <li key={domain}>{domain}</li>
                    ))}
                </ul>

                <h3>Selected SubDomains:</h3>
                <ul>
                    {selectedSubDomains.map(subDomain => (
                        <li key={subDomain}>{subDomain}</li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

export default MultiSelectFilters;

  
