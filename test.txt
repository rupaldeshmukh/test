import React, { useEffect, useRef } from 'react';
import * as d3 from 'd3';

const App = () => {
  const svgRef = useRef(null);

  useEffect(() => {
    const data = [
      { type: 'parent', name: 'Parent 1' },
      { type: 'parent', name: 'Parent 2' },
      { type: 'parent', name: 'Parent 3' },
      { type: 'parent', name: 'Parent 4' },
      { type: 'parent', name: 'Parent 5' },
      { type: 'middleware', name: 'Middleware' },
      { type: 'child', name: 'Child 1' },
      { type: 'child', name: 'Child 2' },
      { type: 'child', name: 'Child 3' },
      { type: 'child', name: 'Child 4' },
      { type: 'child', name: 'Child 5' },
    ];

    const margin = { top: 20, right: 80, bottom: 10, left: 10 };
    const width = 600;
    const height = 500;

    const svg = d3.select(svgRef.current)
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    const xScale = d3.scaleLinear()
      .domain([0, 2])
      .range([0, width]);

    const yScale = d3.scaleBand()
      .domain(data.map(d => d.name))
      .range([0, height])
      .padding(0.1);

    svg.selectAll('.node')
      .data(data)
      .enter().append('rect')
      .attr('class', 'node')
      .attr('x', (d) => xScale(d.type === 'middleware' ? 1 : (d.type === 'child' ? 2 : 0)))
      .attr('y', (d) => yScale(d.name))
      .attr('width', width / 3)
      .attr('height', yScale.bandwidth())
      .attr('fill', (d) => {
        if (d.type === 'parent') return 'red';
        else if (d.type === 'middleware') return 'blue';
        else return 'green';
      });

    svg.selectAll('text')
      .data(data)
      .enter()
      .append('text')
      .attr('x', (d) => xScale(d.type === 'middleware' ? 1 : (d.type === 'child' ? 2 : 0)) + width / 6)
      .attr('y', (d) => yScale(d.name) + yScale.bandwidth() / 2)
      .attr('dy', '0.35em')
      .attr('text-anchor', 'middle')
      .text(d => d.name);

  }, []);

  return (
    <svg ref={svgRef}></svg>
  );
};

export default App;
